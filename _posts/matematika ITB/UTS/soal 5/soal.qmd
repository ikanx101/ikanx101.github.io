---
title: "Tugas/Ujian Sains Komputasi: Algoritma dan Perancangan Software - UTS I"
format: 
  gfm:
    html-math-method: webtex
    toc: true
    toc-depth: 4
    fig-dpi: 500
    fig-width: 8
    fig-height: 4.5
editor: visual
execute:
  echo: false
  warning: false
  error: false
---

```{r}
#| echo: false

options(digits = 9)

rm(list=ls())

library(dplyr)
library(ggplot2)

set.seed(20921004)

setwd("~/ikanx101.github.io/_posts/matematika ITB/UTS/soal 5")

gambar_grafik = function(x_lower,x_upper, # selang x
                         y_lower,y_upper, # selang y
                         delta, # selang gambar
                         f){ # fungsi f(x,y)
  # generate selang
  selang_x = seq(x_lower,x_upper,by = delta)
  selang_y = seq(y_lower,y_upper,by = delta)
  
  # menghitung (x,y) yang memenuhi f(x,y) = 1
  df = 
    # mengeluarkan semua kombinasi yang mungkin dari selang
    expand.grid(selang_x,selang_y) %>% 
    as.data.frame() %>% 
    # mengubah nama variabel menjadi x,y
    rename(x = Var1,
           y = Var2) %>%  
    # menghitung nilai f(x,y)
    mutate(f = f(x,y)) %>%
    # hanya mengambil (x,y) yang memenuhi f(x,y) = 1
    filter(round(f,2) == 1)
  # membuat grafik
  df %>% 
    ggplot(aes(x,y)) +
    geom_point(size = .1,
               color = "steelblue") +
    theme_minimal() +
    geom_vline(xintercept = 0,color = "black") +
    geom_hline(yintercept = 0,color = "black") +
    labs(title = "Grafik f(x,y)",
         caption = "Digambar dengan R\n20921004@mahasiswa.itb.ac.id")
}
```

# SOAL 1a

## Soal Utama

Diketahui sebuah fungsi:

$$\frac{(x+1)^2}{16} + \frac{(y-1)^2}{8} = 1$$

### Sub Soal Ia i

Gambarlah fungsi tersebut. Hitunglah luas area di bawah kurva pada kuadran pertama untuk nilai $x \in [0, \sqrt{14}-1]$ dengan metode partisi trapesium.

### Jawaban Sub Soal Ia i

__Gambar Fungsi__ Berikut adalah gambar fungsi yang saya buat dengan __R__.

```{r}
# fungsi f(x,y) dari soal
f = function(x,y){
  p1 = ((x+1)^2)/16;p2 = ((y-1)^2)/8;return(p1+p2)
}

# gambar grafik
gambar_grafik(-10,4,-10,10,.005,f) + 
  coord_equal() +
  annotate("label",x = 1,y = 1,label = "Kuadran I")

```

Sekarang kita akan menghitung luas area pada kuadran I di selang $x \in [0, \sqrt(14)-1]$. Saya akan gambarkan selang tersebut dengan garis merah sebagai berikut:

```{r}
soal = 
  gambar_grafik(-10,4,-10,10,.005,f) + 
  coord_equal() +
  geom_vline(xintercept = 0,
             color = "red") +
  geom_vline(xintercept = sqrt(14)-1,
             color = "red") +
  geom_hline(yintercept = 0,
             color = "red")

soal +
  annotate("label",
           x = 1.25,y = 1.5,size = 2.5,
           label = "Area yang dicari\nluasnya")
```

__Mengubah Fungsi__ Untuk memudahkan, kita perlu memodifikasi fungsi $f(x,y)$ ke dalam bentuk $y = g(x)$ yang lebih sederhana.

$$y = 1+ \sqrt{8 - \frac{(x+1)^2}{2}}$$

Karena kita akan menghitung luas area di kuadran I, maka nilai akar yang dihasilkan kita akan ambil hanya yang bernilai __positif__ saja.

```{r}
g = function(x){
  isi = 8 - (((x+1)^2)/2)
  1 + sqrt(isi)
}

```

__Luas Area di Bawah Kurva__ Ide dasar untuk menghitung luas area di bawah kurva adalah:

$$L = alas \times tinggi$$

Pada partisi trapesium, tinggi yang akan digunakan adalah: $tinggi = \frac{f(x_1) + f(x_2)}{2}$

```{r}
knitr::include_graphics("images.png")
```

Pada metode trapesium ini, penentuan berapa banyak selang akan mempengaruhi seberapa akurat hasilnya.

Barikut adalah program __luastrap__ yang saya buat di __R__:

```{r}
#| echo: true
luas_trap = function(x0, # titik awal
                     xn, # titik akhir
                     n,  # banyak selang
                     f){ # fungsi y = f(x)
  # menghitung delta x
  h = (xn - x0) / n
  # menghitung f di x0
  f0 = f(x0)
  # selang pertama
  i = 1
  k = x0 + i*h
  fn = f(k)
  integration = (f0+fn)/2
  # iterasi untuk selang berikutnya hingga selesai
  for(i in 2:n){
    f0 = fn
    k = x0 + i*h
    fn = f(k)
    temp = (f0+fn)/2
    integration = integration + temp
  }
  # menghitung hampiran luas
  integration = integration * h
  return(integration)
}
```

Sekarang kita akan bandingkan hasilnya untuk berbagai banyak selang.

```{r}
N = c(10,50,100,200,1000,2500,5000,100000,250000,500000,750000,1000000)
Luas = c()
for(i in 1:length(N)){
  Luas[i] = luas_trap(0,
                      sqrt(14)-1,
                      N[i],
                      g)
}
```

```{r}
data.frame(N,Luas) %>% 
  rename("n banyak selang" = N,
         "Luas aproksimasi" = Luas) %>% 
  knitr::kable("simple",caption = "Hasil Perhitungan Luas Trapesium",align = "c")
```

Terlihat bahwa semakin banyak selangnya, hasilnya konvergen ke suatu nilai yang sama yakni: __8.65536904__.


### Sub Soal Ia ii

Buatlah algoritma dan _flowchart_ untuk menghitung luas soal sebelumnya dengan metode Monte Carlo. Lakukan analisa hasil yang diperoleh dengan jumlah sampling yang diberikan. Anggaplah perhitungan analitis adalah yang benar sehingga merupakan rujukan nilai.

### Jawaban Sub Soal Ia ii

__Perhitungan Analitis__ Kita bisa menghitung secara analitis luas area di bawah kurva dengan cara melakukan integral tentu berikut ini:

$$\int_0^{\sqrt{14}-1} 1+ \sqrt{8 - \frac{(x+1)^2}{2}} \text{ dx} \simeq 8.65536904$$

__Metode Monte Carlo__ Analogi dari metode ini adalah seperti melempar sekian banyak _darts_ ke suatu target. Luas area di bawah kurva didefinisikan sebagai rasio dari banyaknya _darts_ yang jatuh di bawah kurva dengan total semua _darts_ yang dilempar.

Berikut adalah _flowchart_-nya:

```{r out.height="30%"}
knitr::include_graphics("bruteforce.png")
```

Hal terpenting dalam metode ini adalah __mendefinisikan batas titik__ $x,y$ untuk di-_random_. Kenapa?

> Kita tidak ingin _darts_ yang kita lempar jatuh ke area sembarang! Kita harus definisikan di mana __area bermain__ _darts_.

Perhatikan kembali grafik di bawah ini:

```{r}
soal = 
  soal +
  geom_segment(x = 0, xend = 0,
               y = 0, yend = 4,
               color = "darkgreen",
               size = 1) +
  geom_segment(x = sqrt(14)-1, xend = sqrt(14)-1,
               y = 0, yend = 4,
               color = "darkgreen",
               size = 1) +
  geom_segment(x = 0, xend = sqrt(14)-1,
               y = 0, yend = 0,
               color = "darkgreen",
               size = 1) +
  geom_segment(x = 0, xend = sqrt(14)-1,
               y = 4, yend = 4,
               color = "darkgreen",
               size = 1) 

soal +
  annotate("label",
           x = 1.25,
           y = 1.25,
           label = "Area on target") +
  annotate("label",
           x = 2,
           y = 3.5,
           label = "Area off target")
```

Saya akan menjadikan area di __dalam kotak warna hijau__ sebagai area random titik metode Monte Carlo. Jika titik tersebut jatuh ke bawah kurva, maka akan dihitung sebagai __on target__. Jika jatuh di atasnya, berarti __off target__.

Kelak luas akan dihitung dengan cara:

$$L = 4 \times (\sqrt{14}-1) \times ratio$$

Berikut adalah programnya dalam __R__:

```{r}
#| echo: true
brute_force = function(f,x1,x2,y1,y2,N){
  # generating random number
  x = runif(N,x1,x2)
  y = runif(N,y1,y2)
  
  # pengecekan y <= f(x)
  rekap = 
    data.frame(x,y) %>% 
    mutate(f_x = f(x),
           on_target = ifelse(y <= f_x,1,0))
  
  # hitung rasio on target vs all dots
  rasio = sum(rekap$on_target) / N
  # hitung luas
  luas = (x2-x1)*(y2-y1)*rasio
  
  # perbandingan dengan eksak
  eksak = 8.65536904
  delta = abs(eksak - luas)
  
  # output plot
  plot_sim = 
    soal +
    geom_point(data = rekap,aes(x,y,color = on_target)) +
    theme(legend.position = "none") +
    labs(subtitle = paste0("Didapat nilai rasio sebesar ",rasio))
  
  # output
  output = list(
    "Plot Brute Force" = plot_sim,
    "Luas area di bawah kurva" = luas,
    "Absolute selisih dg solusi eksak" = delta
    )
  
  return(output)
}
```

Saya menghitung _error_ atau __selisih solusi numerik dengan solusi eksak__ dengan cara:

$$\Delta = |eksak - numerik|$$

Sekarang kita akan coba program tersebut untuk N = 100

```{r}
brute_force(g,0,sqrt(14)-1,0,4,100)
```

Sekarang kita akan coba program tersebut untuk N = 200

```{r}
brute_force(g,0,sqrt(14)-1,0,4,200)
```

Sekarang kita akan coba program tersebut untuk N = 500

```{r}
brute_force(g,0,sqrt(14)-1,0,4,500)
```

__Masalah pada Brute Force__ Salah satu prinsip metode ini adalah _random bumber generator_. Oleh karena itu, bisa jadi pada __N__ besar hasilnya tidak lebih baik pada __N__ kecil __dalam sekali run__. 

Untuk mengatasi hal tersebut kita harus melakukan _run_ berulang-ulang dan menghitung nilai rata-ratanya sebagai _output_ finalnya. Saya akan coba melakukan pengulangan sebanyak __100 kali__ setiap kali _run_ untuk mendapatkan aproksimasi yang lebih baik.

Berikut adalah modifikasi program sebelumnya yang saya berikan nama __luasmc__.

```{r}
#| echo: true
luas_mc = function(f,x1,x2,y1,y2,N){
  # membuat template vector luas
  luas = c()
  # lakukan 100 x pengulangan
  for(ikanx in 1:100){
    # generating random number
    x = runif(N,x1,x2)
    y = runif(N,y1,y2)
  
    # pengecekan y <= f(x)
    rekap = 
      data.frame(x,y) %>% 
      rowwise() %>% 
      mutate(f_x = f(x),
             on_target = ifelse(y <= f_x,1,0)) %>% 
      ungroup()
  
    # hitung rasio on target vs all dots
    rasio = sum(rekap$on_target) / N
    # hitung luas
    luas_temp = (x2-x1)*(y2-y1)*rasio
    # memasukkan ke dalam template
    luas = c(luas,luas_temp)
  }
  
  # menghitung rata-rata luas
  return(mean(luas))
}
```

Kita akan coba hitung untuk nilai __N__ yang berbeda-beda sebagai berikut:

```{r}
N = c(10,50,100,200,500,1000,2500)
Luas = c()
for(i in 1:length(N)){
  Luas[i] = luas_mc(g,0,sqrt(14)-1,0,4,N[i])
}
```

```{r}
hasil_mc = 
  data.frame(N,Luas) %>% 
  mutate(delta = abs(8.65536904 - Luas)) 

hasil_mc %>% 
  rename("n banyak titik" = N,
         "Luas aproksimasi" = Luas,
         "Absolute selisih dengan eksak" = delta) %>% 
  knitr::kable("simple",caption = "Hasil Perhitungan Luas Monte Carlo",align = "c")
```

Kita bisa lihat bahwa ada indikasi semakin tinggi __N__ yag digunakan, nilai absolut selisih aproksiasi dengan eksak relatif semakin kecil.

```{r}
hasil_mc %>% 
  ggplot(aes(x = N,
             y = delta)) +
  geom_line() +
  labs(title = "Grafik Selisih Luas Aproksimasi dengan Luas Eksak",
       subtitle = "Menggunakan Metode Monte Carlo dengan Berbagai Nilai N\nPengulangan Dilakukan 100x Per Nilai N") +
  theme_minimal()
```

Namun agar metode ini lebih __stabil__ dan konvergen, kita bisa mengulang komputasi lebih banyak per nilai __N__ dengan konsekuensi _runtime_ yang semakin panjang. Pada soal ini, saya menggunakan 100 x pengulangan.



---

`if you find this article helpful, support this blog by clicking the ads.`
