---
title: "Tugas/Ujian Sains Komputasi: Algoritma dan Perancangan Software - Tugas II"
format: 
  gfm:
    html-math-method: webtex
    toc: true
    toc-depth: 4
editor: visual
execute:
  echo: true
  warning: false
  error: false
---

```{r}
#| echo: false
rm(list=ls())
library(Ryacas)
library(dplyr)
library(ggplot2)
```

# *TASK* 1

## Soal

*By using bisection method, find the root of the following functions:*

1.  $f(x) = x^2 - 3x - 2$
2.  $f(x) = x^3 + x^2 - 3x - 2$

## Jawab

Pada metode *bisection*, pemilihan selang iterasi menjadi penting. Berdasarkan teorema nilai antara:

> Misalkan $f \in C[a,b]$ dan $L$ adalah suatu nilai di antara $f(a)$ dan $f(b)$. Maka **ada** suatu nilai $c \in (a,b)$ yang memenuhi $f(c) = L$.

Oleh karena itu, kita perlu menemukan selang awal iterasi $[a,b]$ yang memenuhi $f(a).f(b)<0$.

Iterasi akan dihentikan saat *error* memenuhi nilai yang diinginkan. Saya menggunakan kriteria pemberhentian iterasi sebagai berikut:

$$b_n-a_n < 10^{-5},n=1,2,..,I$$

Berikut adalah *function* metode *bisection* yang saya buat di **R**:

```{r}
bagi_dua = function(a,b,f,iter_max,tol_max){
   # fungsi hitung bisection
    # initial condition
    i = 1
    hasil = data.frame(n_iter = NA,
                       a = NA,
                       b = NA,
                       c = NA)

    while(i<= iter_max && (b-a) > tol_max){
      # cari titik tengahnya
      p = a + ((b-a)/2)
      # hitung fungsi di titik tengah
      FP = f(p)
      # hitung fungsi di titik awal
      FA = f(a)
      # hitung fungsi di titik akhir
      FB = f(b)
      # tulis hasil dalam data frame
      hasil[i,] = list(i,a,b,p)
      
      # tukar nilai a atau b dengan nilai p 
      if(FA*FP < 0){b = p} else{a = p}
      # untuk iterasi berikutnya
      i  = i + 1
      
      # mencatat akar persamaan
      akar = p
      # tambahin dulu checking apakah f(a), f(b),atau f(c) ada yang nol?
      if(FP == 0){
        akar = p
        break} else if(FA == 0){
          akar = a
          break} else if(FB == 0){
            akar = b
            break}
      
    }
  
  # mencatat iterasi terbesar
  iterasi = i-1 # dikurang satu karena pada i+1 
                # sebenarnya tidak ada proses jika pada while TRUE
  
  # membuat ouput
  hasil = list(
    `iterasi max` = iterasi,
    `akar persamaan` = akar,
    `hasil perhitungan` = hasil
    )
  
  # print output
  return(hasil)
}
```

### Persamaan I

Pertama-tama, mari kita buat grafik dari $f(x) = x^2 - 3x - 2$ sebagai berikut:

```{r}
#| fig-align: "center"
#| echo: false

f = function(x){x^2 - 3*x - 2}

data.frame(x = seq(-5,5,by = .1)) %>% 
  mutate(y = f(x)) %>% 
  ggplot(aes(x,y)) +
  geom_line(color = "steelblue") +
  geom_hline(yintercept = 0) +
  geom_vline(xintercept = 0) +
  labs(title = "Grafik Fungsi f(x) di [-5,5]",
       subtitle = "Akar persamaan ada pada saat f(x) = 0",
       caption = "Digambar oleh 20921004") +
  theme(plot.title = element_text(hjust = .5, size = 15),
        plot.caption = element_text(hjust = .5, size = 10),
        plot.subtitle = element_text(hjust = .5, size = 12)) +
  scale_x_continuous(breaks = (-5:5))
```

Dari grafik di atas, terlihat bahwa $f(x)$ memiliki dua akar sebagai berikut:

1.  Satu akar $f(x)$ berada di selang $[-1,0]$.
2.  Satu akar $f(x)$ lainnya berada di selang $[3,4]$.

Berdasarkan informasi di atas, kita akan lakukan metode *bisection* di kedua selang tersebut.

#### *Bisection* pada selang $[-1,0]$

Berikut adalah hasil proses *bisection* di selang tersebut:

```{r}
#| echo: false

bagi_dua(a = -1,
         b = 0,
         f,
         iter_max = 50,
         tol_max = 10^(-5))
```

#### *Bisection* pada selang $[3,4]$

Berikut adalah hasil proses *bisection* di selang tersebut:

```{r}
#| echo: false

bagi_dua(a = 3,
         b = 4,
         f,
         iter_max = 50,
         tol_max = 10^(-5))
```

#### Kesimpulan

$f(x)$ memiliki akar pada $x = -0.5615463$ dan $x = 3.561546$

### Persamaan II

Pertama-tama, mari kita buat grafik dari $f(x) = x^3 + x^2 - 3x - 2$ sebagai berikut:

```{r}
#| echo: false
#| fig-align: "center"

f = function(x){x^3 + x^2 - 3*x - 2}

data.frame(x = seq(-3,2,by = .1)) %>% 
  mutate(y = f(x)) %>% 
  ggplot(aes(x,y)) +
  geom_line(color = "steelblue") +
  geom_hline(yintercept = 0) +
  geom_vline(xintercept = 0) +
  labs(title = "Grafik Fungsi f(x) di [-3,2]",
       subtitle = "Akar persamaan ada pada saat f(x) = 0",
       caption = "Digambar oleh 20921004") +
  theme(plot.title = element_text(hjust = .5, size = 15),
        plot.caption = element_text(hjust = .5, size = 10),
        plot.subtitle = element_text(hjust = .5, size = 12)) +
  scale_x_continuous(breaks = (-5:5))
```

Dari grafik di atas, terlihat ada tiga akar persamaan di selang:

1.  $[-3,-1]$
2.  $[-1,0]$
3.  $[1,2]$

Berdasarkan informasi di atas, kita akan lakukan metode *bisection* di ketiga selang tersebut.

#### *Bisection* pada selang $[-3,-1]$

Berikut adalah hasil proses *bisection* di selang tersebut:

```{r}
#| echo: false

bagi_dua(a = -3,
         b = -1,
         f,
         iter_max = 50,
         tol_max = 10^(-5))
```

#### *Bisection* pada selang $[-1,0]$

Berikut adalah hasil proses *bisection* di selang tersebut:

```{r}
#| echo: false

bagi_dua(a = -1,
         b = 0,
         f,
         iter_max = 50,
         tol_max = 10^(-5))
```

#### *Bisection* pada selang $[1,2]$

Berikut adalah hasil proses *bisection* di selang tersebut:

```{r}
#| echo: false

bagi_dua(a = 1,
         b = 2,
         f,
         iter_max = 50,
         tol_max = 10^(-5))
```

#### Kesimpulan

$f(x)$ memiliki akar pada $x = -2$, $x = -0.6180344$, dan $x = 1.618034$.

# *TASK* 2

## Soal

*By using numerical integration, find the area under the following curve:*

![](Screenshot_20210911_140215.jpg){fig-align="center" width="650"}


## Jawab

### Lingkaran I

Kita akan hitung terlebih dahulu untuk luas lingkaran pertama.

Perhatikan bahwa kita bisa membentuk kurva tersebut dengan fungsi $f(x) = \sqrt{6^2 - x^2} \text{, untuk x } \in [0,6]$.

```{r}
#| echo: false
#| fig-align: "center"

rm(list=ls())

f = function(x){sqrt(-x^2 + 6^2)}

data.frame(x = seq(0,6,by = .05)) %>% 
  mutate(y = f(x)) %>% 
  ggplot(aes(x,y)) +
  geom_line(color = "steelblue") +
  coord_equal() +
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  labs(title = "Grafik Fungsi Lingkaran Berjari-jari 6",
       subtitle = "Cari luas dibawah kurva!",
       caption = "Digambar oleh 20921004") +
  theme(plot.title = element_text(hjust = .5, size = 15),
        plot.caption = element_text(hjust = .5, size = 10),
        plot.subtitle = element_text(hjust = .5, size = 12))

```

Untuk menghitung luas $f(x)$ di $[0,6]$ secara _exact_, setidaknya kita bisa melakukan dua hal, yakni:

1. Menghitung $\int_0^6{f(x)} dx$. 
1. Menghitung dari rumus luas lingkaran: $\frac{1}{4} \pi.r^2 = \frac{1}{4} \pi.6^2 =$ `r 1/4 * pi * 6^2`. 

Untuk menghampirinya secara numerik, kita akan hitung penjumlahan luas dari _square_ atau _trapezoid_ yang dibangun di bawah kurva.

Berikut adalah _function_ yang dibuat di __R__ untuk kedua metode tersebut:

```{r}
hampiri = function(x0,xn,n,f){
  # save initial dulu
  initial_1 = x0
  initial_2 = xn
  
  # ================================
  # metode square
  h = (xn - x0) / n
  integration = f(x0)
  for(i in 1:n){
    k = x0 + i*h
    integration = integration + f(k)
  }
  square = integration * h
  
  # =================================
  # metode trapezoid
  x0 = initial_1
  xn = initial_2
  h = (xn - x0) / n
  integration = f(x0) + f(xn)
  for(i in 1:n){
    k = x0 + i*h
    integration = integration + 2*f(k)
  }
  trapezoid = integration * h/2

  # =================================
  # bikin output
  selang = n
  luas_persegi = square
  luas_trapezoid = trapezoid
  
  output = list(selang,luas_persegi,luas_trapezoid)
}
```


Sekarang kita akan hitung luas $f(x)$ untuk berbagai macam nilai $n$ kemudian akan kita bandingkan hasilnya dengan hitungan _exact_ sebelumnya.

Saya definisikan:

$$\Delta = \text{exact} - \text{hampiran}$$

```{r}
#| echo: false

hitung = data.frame(n = NA,
                    luas_persegi = NA,
                    luas_trapezoid = NA)

hit_n = c(5,10,25,50,100,200,500,1000,3000,5000,10000,20000,50000)

for(i in 1:length(hit_n)){
  hitung[i,] = hampiri(0,6,hit_n[i],f)
}

hitung %>% 
  mutate(delta_persegi_exact = (1/4 * pi * 6^2) - luas_persegi,
         delta_trapezoid_exact = (1/4 * pi * 6^2) - luas_trapezoid) %>% 
  knitr::kable("simple",
               align = "c",
               caption = "Hasil Perhitungan Hampiran vs Exact Lingkaran I")
```

### Lingkaran II

Secara _exact_ luas lingkarannya adalah $\frac{3}{4} \pi 6^2 =$ `r 3/4*pi*6^2`.

Pada lingkaran berikutnya, kita akan membuat fungsi sebagai berikut:

$$g(y) = \left\{\begin{matrix}
-\sqrt{6^2 - y^2} \text{, untuk y } \in [-6,0] \\ 
\sqrt{6^2 - y^2} \text{, untuk x } \in [-6,6]
\end{matrix}\right.$$


Oleh karena luas merupakan nilai positif, maka untuk menghitungnya kita akan buat fungsinya menjadi $|g(y)|$. Akibatnya:

$$g(y) = \left\{\begin{matrix}
\sqrt{6^2 - y^2} \text{, untuk y } \in [-6,0] \\ 
\sqrt{6^2 - y^2} \text{, untuk x } \in [-6,6]
\end{matrix}\right.$$

Saya juga akan hitung $\Delta$ hampiran terhadap _exact_ dengan definisi yang sama.

```{r}
#| echo: false

f = function(x){3 * sqrt(-x^2 + 6^2)}
hitung = data.frame(n = NA,
                    luas_persegi = NA,
                    luas_trapezoid = NA)

hit_n = c(5,10,25,50,100,200,500,1000,3000,5000,10000,20000,50000)

for(i in 1:length(hit_n)){
  hitung[i,] = hampiri(0,6,hit_n[i],f)
}

hitung %>% 
  mutate(delta_persegi_exact = (3/4 * pi * 6^2) - luas_persegi,
         delta_trapezoid_exact = (3/4 * pi * 6^2) - luas_trapezoid) %>% 
  knitr::kable("simple",
               align = "c",
               caption = "Hasil Perhitungan Hampiran vs Exact Lingkaran II")

rm(list=ls())
```


# TASK 3

## Soal

_Based on the following differential equation:_

$$\frac{d}{dt}y(t) = t \sqrt{y(t)}; y(0)=1$$

_Define_ $y(t)$ _for t = 0,1,2,..,10 by using 4th order Runge-Kutta!_ _Use h=0.1_.

_Compare the result with the following exact solution:_

$$y(t) = \frac{1}{16}(t^2+4)^2$$

## Jawab

Untuk menjawabnya, pertama-tama kita akan buat _function_ Runge-Kutta di __R__ sebagai berikut:

```{r}
rk_4order = function(f, x0, y0, h, n){
  # initial condition
  x = x0
  y = y0
  # proses iterasi
  for(i in 1:n){
    k1 = f(x0,y0)
    k2 = f(x0 + 0.5*h,y0 + 0.5*k1*h)
    k3 = f(x0 + 0.5*h,y0 + 0.5*k2*h)
    k4 = f(x0 + h,y0 + k3*h)
    y0 = y0 + (1/6)*(k1 + 2*k2 + 2*k3 + k4) * h
    x0 = x0 + h
    x = c(x, x0)
    y = c(y, y0)
  }
  # output
  output = data.frame(x = x,
                      y = y)
  return(output)
}
```

Sekarang kita akan hitung bagaimana hasilnya:

```{r}
dydt = function(t,y){t * sqrt(y)}
y0 = 1
t0 = 0
h = 0.1
n = 100

hampiran = 
  rk_4order(f = dydt, 
            x0 = t0, 
            y0 = y0, 
            h = h, 
            n = n)
```

Lalu akan saya bandingkan hasilnya dari perhitungan _exact_ dan menghitung $\Delta = numerik - exact$ berikut:

```{r}
#| echo: false
#| 
y = function(t){(1/16)*(t^2 + 4)^2}
exact = 
  data.frame(t = seq(0,10,by = h)) %>% 
  mutate(y = y(t)) 
```

```{r}
#| echo: false
hampiran = 
  hampiran %>%  
  rename(t = x,
         y_numerik = y) 

exact = 
  exact %>%  
  rename(y_exact = y) 

final = 
  hampiran %>% 
  mutate(y_exact = exact$y_exact,
         t = as.numeric(t),
         delta = y_numerik - y_exact) 
```

```{r}
#| echo: false
final %>% 
  knitr::kable("simple",
               caption = "Hasil Perhitungan Exact vs Numerik (RK4)")
```

Terlihat bahwa $\Delta$ yang didapatkan sudah sangat kecil, yang berarti perhitungan secara _exact_ dan numerik sudah __sangat dekat__ (__akurat__).
