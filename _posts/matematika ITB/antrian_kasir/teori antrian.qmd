---
title: "xxx"
format:
  gfm:
    html-math-method: webtex
fig-dpi: 500
fig-width: 8
fig-height: 4.5
editor: visual
execute:
  warning: false
error: false
---

```{r}
#| include: false
setwd("~/ikanx101.github.io/_posts/matematika ITB/antrian_kasir")
```

Mengantri itu adalah suatu aktivitas yang tidak kita senangi. Di satu sisi kita tidak ingin menunggu lama-lama namun di sisi lain kita ingin dilayani secara ramah, prima, dan baik. 

Setiap kali mengantri di suatu tempat, saya selalu bertanya-tanya:

1.  **Berapa lama** saya harus mengantri?
2.  **Berapa banyak** orang yang mengantri?
3.  Apa yang terjadi jika ada **jalur antrian baru** yang dibuka?

---

Pertanyaan-pertanyaan tersebut membuat saya teringat salah satu topik yang dulu sempat dibahas saat kuliah di matematika, yakni: **teori antrian**. Sayang sekali saya tidak mengambil mata kuliah tersebut tapi kali ini saya akan mencoba membahasnya tipis-tipis di *blog* ini.

# ***Queueing Theory*****: Matematika di Balik Antrian**

*Queueing theory* adalah cabang matematika terapan yang mempelajari aliran antrian, digunakan di supermarket, bandara, hingga jaringan komputer. Tujuannya adalah untuk **menganalisis dan mengoptimalkan sistem antrian** agar lebih efisien.

Beberapa konsep kunci dalam teori antrian bisa dituliskan sebagai berikut:

-   **Kedatangan (*Arrival Rate* -** $\lambda$): Rata-rata banyaknya orang yang masuk antrian pada rentang waktu tertentu.
    -   *Arrival rate* mengikuti [distribusi *Poisson*](https://ikanx101.com/blog/poin-nfi-mt/).
-   **Layanan (*Service Rate* -** $\mu$): Rata-rata banyaknya orang yang dilayani per rentang waktu tertentu.
    -   Nilai ini tidak terbatas pada distribusi tertentu.
    -   Bisa jadi bernilai konstan atau dinamis mengikuti distribusi tertentu.
-   **Jumlah pelayan (servers)**: Berapa banyak pelayan yang bertugas.
    -   Suatu sistem antrian bisa memiliki satu atau banyak *server* (*single server* / *multi server*).
-   **Intensitas _traffic_ antrian ($\rho$)**: Merupakan rasio dari _arrival rate_ dan _service rate_.
    - Dituliskan secara matematis $\rho = \frac{\lambda}{\mu}$.
    - Nilai ini menentukan seberapa padat sistem antrian.
    - Jika $\rho < 1$, sistem antrian akan stabil (antrian akan terbatas).
    - Jika $\rho \geq 1$, sistem antrian akan terus memanjang tak terbatas.
-   **Variabilitas (**$\sigma$): Ketidakpastian dalam waktu pelayanan (misal: ada konsumen yang membayar menggunakan uang koin sehingga membutuhkan waktu lebih lama).

Sekarang berbekal konsep kunci tersebut, mari kita telaah sistem antrian berdasarkan beberapa model berikut ini:

## **Model I** - Model Antrian Sederhana (M/M/1)

Model **M/M/1** menggambarkan situasi antrian saat hanya ada satu _server_ yang bertugas melayani semua orang yang datang.

-   "M" = Kedatangan pelanggan acak (*Poisson*). Nilainya mengikuti distribusi _Poisson_ dengan tingkat kedatangan $\lambda$.
-   "M" = Waktu pelayanan. Mengikuti distribusi eksponensial dengan tingkat pelayanan $\mu$.
-   "1" = 1 _server_.

Misalkan suatu minimarket yang buka selama 15 jam hanya memiliki satu kasir dengan:

1. Tingkat kedatangan pelanggan: 5 pelanggan per jam ($\lambda = 5$).
1. Tingkat pelayanan: 8 pelanggan per jam ($\mu = 8$).

Dari parameter di atas, kita bisa menghitung intensitas _traffic_ antrian sebagai berikut:

$$\rho = \frac{5}{8} = 0.625$$

Kita bisa menyimpulkan bahwa sistem antrian akan stabil. Saya akan simulasikan antrian yang terjadi selama satu minggu (15 jam x 7 hari) di minimarket tersebut.

```{r}
#| include: false

rm(list=ls())
gc()

set.seed(123)    # Untuk reproduktibilitas

library(dplyr)
library(tidyr)

# Fungsi simulasi
simulate_mm1 = function(lambda, mu, sim_time) {
  # Inisialisasi
  time           = 0
  queue_length   = 0
  server_busy    = FALSE
  next_arrival   = rexp(1, rate = lambda)
  next_departure = Inf
  events         = data.frame(time = numeric(), event = character(), queue = numeric())
  
  # Simulasi
  while (time < sim_time) {
    if (next_arrival < next_departure) {
      time = next_arrival
      # Catat kedatangan
      events       = rbind(events, data.frame(time = time, event = "Arrival", queue = queue_length))
      queue_length = queue_length + 1
      
      if (!server_busy) {
        server_busy    = TRUE
        next_departure = time + rexp(1, rate = mu)
      }
      next_arrival = time + rexp(1, rate = lambda)
    } else {
      time = next_departure
      # Catat keberangkatan
      events       = rbind(events, 
                           data.frame(time = time, 
                                      event = "Departure", 
                                      queue = queue_length))
      queue_length = queue_length - 1
      
      if (queue_length > 0) {
        next_departure <- time + rexp(1, rate = mu)
      } else {
        server_busy    = FALSE
        next_departure = Inf
      }
    }
  }
  return(events)
}

```


```{r}
# Simulasi Antrian M/M/1

# Parameter
lambda   = 5     # Tingkat kedatangan (pelanggan per jam)
mu       = 8     # Tingkat pelayanan (pelanggan per jam)
sim_time = 15*7  # Waktu simulasi (jam)
```

```{r}
#| echo: false

# Jalankan simulasi
sim_results = simulate_mm1(lambda, mu, sim_time)

# Analisis hasil
arrivals   = subset(sim_results, event == "Arrival")
departures = subset(sim_results, event == "Departure")

# Hitung metrik kinerja
avg_queue_length = mean(sim_results$queue)
utilization      = sum(sim_results$queue > 0) / nrow(sim_results)

# Teori vs Simulasi
rho      = lambda/mu  # Faktor utilisasi teoritis
L_theory = rho/(1-rho)  # Jumlah pelanggan rata-rata dalam sistem
W_theory = 1/(mu - lambda)  # Waktu rata-rata dalam sistem (jam)

cat("Hasil Simulasi:\n")
cat("Rata-rata panjang antrian:", avg_queue_length, "\n")
cat("Utilisasi server (ρ simulasi):", utilization, "\n\n")

cat("Hasil Teoritis (M/M/1):\n")
cat("Faktor utilisasi (ρ):", rho, "\n")
cat("Jumlah pelanggan rata-rata dalam sistem (L):", L_theory, "\n")
cat("Waktu rata-rata dalam sistem (W):", W_theory, "jam atau", W_theory*60, "menit\n")

# Visualisasi panjang antrian
plot(sim_results$time, sim_results$queue, type = "s", 
     xlab = "Waktu (jam)", ylab = "Panjang Antrian",
     main = "Simulasi Antrian M/M/1")
```

Kita bisa lihat dari simulasi tersebut bahwa kasir minimarket bisa memberikan layanan antrian yang terkendali. Walaupun sempat terjadi antrian panjang di rentang waktu tertentu tapi tak akan membengkak semakin besar.

Apa yang terjadi jika nilai $\lambda = \mu$?

Coba kita simulasikan kembali:

```{r}
# Simulasi Antrian M/M/1

# Parameter
lambda   = 5     # Tingkat kedatangan (pelanggan per jam)
mu       = 5     # Tingkat pelayanan (pelanggan per jam)
sim_time = 15*7  # Waktu simulasi (jam)
```

```{r}
#| echo: false

# Jalankan simulasi
sim_results = simulate_mm1(lambda, mu, sim_time)

# Analisis hasil
arrivals   = subset(sim_results, event == "Arrival")
departures = subset(sim_results, event == "Departure")

# Hitung metrik kinerja
avg_queue_length = mean(sim_results$queue)
utilization      = sum(sim_results$queue > 0) / nrow(sim_results)

# Teori vs Simulasi
rho      = lambda/mu  # Faktor utilisasi teoritis
L_theory = rho/(1-rho)  # Jumlah pelanggan rata-rata dalam sistem
W_theory = 1/(mu - lambda)  # Waktu rata-rata dalam sistem (jam)

cat("Hasil Simulasi:\n")
cat("Rata-rata panjang antrian:", avg_queue_length, "\n")
cat("Utilisasi server (ρ simulasi):", utilization, "\n\n")

cat("Hasil Teoritis (M/M/1):\n")
cat("Faktor utilisasi (ρ):", rho, "\n")
cat("Jumlah pelanggan rata-rata dalam sistem (L):", L_theory, "\n")
cat("Waktu rata-rata dalam sistem (W):", W_theory, "jam atau", W_theory*60, "menit\n")

# Visualisasi panjang antrian
plot(sim_results$time, sim_results$queue, type = "s", 
     xlab = "Waktu (jam)", ylab = "Panjang Antrian",
     main = "Simulasi Antrian M/M/1")
```

Terlihat bahwa antrian akan selalu ada dan tak ada tanda-tanda pelanggan akan selesai dilayani.

Sekarang saya akan eksplor sistem antrian lain saat ada _multiple server_.

## **Model II** - Model Antrian _Multiple Server_ (M/M/c)

Model **M/M/c** menggambarkan situasi antrian saat ada satu antrian tunggal yang dialirkan ke _multiple server_. Asumsi dasar dari model ini adalah __tingkat pelayanan setiap *server* adalah sama__ (konsisten antar _server_). 

Kita akan simulasikan sistem antrian di minimarket tadi jika ada tiga kasir yang melayani konsumen. Agar menarik, kita akan buat skenario seperti ini:

__Skenario I__: _Underload_ yakni sumber daya berlebih, tapi minimarket sepi. 
    
- Tingkat kedatangan pelanggan rendah 0.1 pelanggan per jam ($\lambda = 0.1$).
- Ada sepuluh kasir dengan tingkat pelayanan masing-masing 10 pelanggan per jam ($\mu = 10$).

```{r}
#| echo: false

library(queuecomputer)
library(ggplot2)

library(queuecomputer)

# Parameter
lambda <- 0.1  # sangat jarang kedatangan
mu <- 10       # sangat cepat pelayanan
c <- 10        # banyak server
n_customers <- 5000  # jumlah pelanggan

# Simulasi
set.seed(123)
arrivals <- cumsum(rexp(n_customers, lambda))
services <- rexp(n_customers, mu)

mmc_underload <- queue_step(arrivals, services, servers = c)

# Hasil
summary(mmc_underload)
plot(mmc_underload, main = "M/M/10 Underload Ekstrem (ρ ≈ 0)")[[2]]
```

Hasilnya adalah sistem antrian selalu kosong. Hampir tidak ada antrian yang terbentuk.


__Skenario II__: _Overload_ yakni sumber daya terbatas, minimarket ramai, dan _server_ lamban. 

- Tingkat kedatangan pelanggan tinggi 20 pelanggan per jam ($\lambda = 20$).
- Ada dua kasir dengan tingkat pelayanan masing-masing 1 pelanggan per jam ($\mu = 1$).

```{r}
#| echo: false

# Parameter
lambda <- 20  # sangat padat kedatangan
mu <- 1       # sangat lambat pelayanan
c <- 2        # sedikit server
n_customers <- 5000  # jumlah pelanggan

# Simulasi
set.seed(123)
arrivals <- cumsum(rexp(n_customers, lambda))
services <- rexp(n_customers, mu)

mmc_overload <- queue_step(arrivals, services, servers = c)

# Hasil
summary(mmc_overload)
plot(mmc_overload, main = "M/M/2 Overload Ekstrem (ρ → ∞)")[[2]]
```

Hasilnya adalah antrian tumbuh tak terbatas, waktu tunggu semakin lama, semua _server_ selalu sibuk, dan sistem tidak stabil.

__Skenario III__: _Critical load_ yakni sistem antrian berada di batas stabilitas. 

- Tingkat kedatangan pelanggan 5 pelanggan per jam ($\lambda = 5$).
- Ada lima kasir dengan tingkat pelayanan masing-masing 1 pelanggan per jam ($\mu = 1$).

```{r}
#| echo: false

# Parameter
lambda <- 5   # kedatangan = kapasitas pelayanan
mu <- 1       # pelayanan normal
c <- 5        # jumlah server
n_customers <- 5000  # jumlah pelanggan

# Simulasi
set.seed(123)
arrivals <- cumsum(rexp(n_customers, lambda))
services <- rexp(n_customers, mu)

mmc_critical <- queue_step(arrivals, services, servers = c)

# Hasil
summary(mmc_critical)
plot(mmc_critical, main = "M/M/5 Critical Load (ρ = 1)")[[2]]
```

Berikut adalah komparasi ketiga skenarionya:

```{r}
#| echo: false

# Membandingkan ketiga kasus
comparison <- data.frame(
  Scenario = c("Underload", "Overload", "Critical"),
  `Mean Waiting Time` = c(
    summary(mmc_underload)$mwt,
    summary(mmc_overload)$mwt,
    summary(mmc_critical)$mwt
  ),
  `Mean Queue Length` = c(
    summary(mmc_underload)$qlength_mean,
    summary(mmc_overload)$qlength_mean,
    summary(mmc_critical)$qlength_mean
  ),
  Utilization = c(
    summary(mmc_underload)$utilization,
    summary(mmc_overload)$utilization,
    summary(mmc_critical)$utilization
  )
) %>% 
  mutate_if(is.numeric,scales::number)

print(comparison)
```


Masih ada beberapa model lagi yang bisa kita eksplor, jadi _stay tuned_ _ya_.

## **Model III** - Model Antrian _General Multiple Server_ (M/G/c)

Model kedua di atas tidak memperhitungkan variasi yang terjadi antar layanan _server_. Karena _server_ juga manusia yang kadang bisa cepat atau lambat. Model M/G/c adalah model antrian dengan karakteristik:

1. Kedatangan (M): Mengikuti proses Poisson dengan tingkat $\lambda$.
1. Pelayanan (G): Waktu pelayanan mengikuti distribusi umum (_General_) dengan _mean_: $\frac{1}{\mu}$ dan variansi $\sigma^2$.
1. $c$ _server_: Terdapat $c$ _server_ paralel.

Perbedaan utama dengan M/M/c:

- M/M/c mengasumsikan waktu pelayanan eksponensial
- M/G/c lebih fleksibel dengan berbagai distribusi waktu pelayanan (normal, uniform, konstan, atau lainnya).

Contoh Aplikasi M/G/c:

1. Bandara (_Check-in Counter_):
    - Kedatangan penumpang: Poisson.
    - Waktu pelayanan: Distribusi normal (karena proses check-in relatif konsisten).
    - Banyak counter paralel.
1. Rumah Sakit (IGD):
    - Kedatangan pasien: Acak (Poisson).
    - Waktu pelayanan: Distribusi Weibull (beberapa kasus cepat, beberapa lama).
    - Beberapa dokter jaga.
1. _Call Center_:
    - Panggilan masuk: Poisson.
    - Durasi panggilan: Distribusi log-normal (banyak panggilan singkat, beberapa sangat panjang).
    - Banyak operator.

Berikut adalah contoh simulasi saat parameter:

1. $\lambda = 15$, tingkat kedatangan (pelanggan/jam).
1. $\mu = 7$, tingkat pelayanan rata-rata (pelanggan/jam per _server_).
1. $\sigma = 0.1$, variasi pelayanan.
1. $c = 3$, jumlah _server_.

```{r}
#| echo: false

rm(list=ls())

# Parameter simulasi
lambda <- 15 # tingkat kedatangan (pelanggan/jam)
mu <- 7 # tingkat pelayanan rata-rata (pelanggan/jam per server)
c <- 3 # jumlah server
sigma <- 0.1 # standar deviasi waktu pelayanan
sim_time <- 200 # jam simulasi
n_customers <- lambda * sim_time # estimasi jumlah pelanggan

# Generate waktu kedatangan
arrivals <- cumsum(rexp(n_customers, lambda))

# Generate waktu pelayanan (distribusi normal positif)
services <- rnorm(n_customers, mean = 1/mu, sd = sigma)
services <- abs(services) # pastikan tidak negatif

# Simulasi antrian
queue_result <- queue_step(arrivals, services, servers = c)

# Hasil summary
summary(queue_result)

# Visualisasi
plot(queue_result, main = "Simulasi M/G/3 dengan Waktu Pelayanan Normal")[[2]]

```

## **Model IV** - Model Antrian _General Multiple Server with Capacity_ (M/G/c/K)

Model terakhir yang hendak saya bahas adalah pengembangan dari model sebelumnya. Salah satu pengembangan kuncinya adalah adanya __kapasitas dari sistem antrian__. Model M/G/c/K adalah model antrian yang lebih realistis dengan karakteristik:

1. Kedatangan (M): Mengikuti proses Poisson dengan tingkat $\lambda$.
1. Pelayanan (G): Waktu pelayanan mengikuti distribusi umum (_General_) dengan _mean_: $\frac{1}{\mu}$ dan variansi $\sigma^2$.
1. $c$ _server_: Terdapat $c$ _server_ paralel.
4. **Kapasitas (K)**: Kapasitas sistem terbatas (antrian + pelayanan ≤ K).

**Perbedaan utama dengan M/G/c**:

- M/G/c/K memiliki kapasitas terbatas (K).
- Pelanggan yang datang saat sistem penuh akan **ditolak/dibuang** (_blocked_).

Contoh Aplikasi M/G/c/K:

1. **Call Center dengan Antrian Terbatas**:
   - Maksimal 20 panggilan dalam sistem (15 menunggu + 5 sedang dilayani).
   - Panggilan baru ditolak jika sistem penuh.
2. **Parkir Mobil**:
   - Kapasitas 50 mobil.
   - Kedatangan acak, waktu parkir bervariasi.
   - Mobil ditolak jika parkir penuh.
3. **Sistem ICU Rumah Sakit**:
   - 10 tempat tidur ICU.
   - Kedatangan pasien emergensi acak.
   - Lama perawatan bervariasi.
   - Pasien dirujuk ke rumah sakit lain jika ICU penuh.

Sekarang kita akan lakukan simulasi dengan parameter berikut:

Berikut adalah contoh simulasi saat parameter:

1. $\lambda = 4$, tingkat kedatangan (pelanggan/jam).
1. $\mu = 3$, tingkat pelayanan rata-rata (pelanggan/jam per _server_).
1. $\sigma = 0.2$, variasi pelayanan.
1. $c = 2$, jumlah _server_.
1. $K = 5$, kapasitas sistem antrian.


```{r}
#| echo: false

library(simmer)
library(simmer.plot)
library(ggplot2)

rm(list=ls())

# Parameter simulasi
lambda <- 4 # tingkat kedatangan (pelanggan/jam)
mu <- 4 # tingkat pelayanan rata-rata (pelanggan/jam per server)
c <- 2 # jumlah server
K <- 5 # kapasitas sistem (antrian + pelayanan)
sim_time <- 200 # jam simulasi
seed <- 123 # seed untuk reproduktibilitas

# Setup lingkungan simulasi
set.seed(seed)
env <- simmer("M/G/c/K Queue Simulation")

# Definisi trajektori pelanggan
customer <- trajectory("Customer's path") %>%
  seize("server", 1) %>% # meminta server
  timeout(function() rnorm(1, mean = 1/mu, sd = 0.2)) %>% # waktu pelayanan
  release("server", 1) # melepaskan server

# Setup sumber daya sistem
env %>%
  add_resource("server", 
               capacity = c, # jumlah server
               queue_size = K - c) %>% # ukuran antrian (K - c)
  add_generator("Customer", 
                customer, 
                function() rexp(1, lambda), # interval kedatangan
                mon = 2) # monitoring level 2

# Jalankan simulasi
env %>% run(until = sim_time)

# Analisis hasil
## Data kedatangan dan keberangkatan
arrivals <- get_mon_arrivals(env)
resources <- get_mon_resources(env)

## Hitung probabilitas blocking
n_total <- nrow(arrivals)
n_blocked <- sum(arrivals$finished == FALSE)
p_block <- n_blocked/n_total

## Hitung metrik kinerja
served <- arrivals[arrivals$finished == TRUE, ]
avg_wait <- mean(served$end_time - served$start_time - served$activity_time)
avg_queue <- mean(resources$queue)
utilization <- mean(resources$server / c)

# Visualisasi
## Plot utilisasi resources
# plot(resources, "usage", "server", items = "server") +
#   ggtitle("Utilisasi Server")

## Plot panjang antrian
# plot(resources, "queue", "server") +
#   ggtitle("Panjang Antrian")

# Hasil
cat("=== Hasil Simulasi M/G/", c, "/", K, " dengan simmer ===\n", sep="")
cat("Total kedatangan:", n_total, "\n")
cat("Total dilayani:", n_total - n_blocked, "\n")
cat("Total blocked:", n_blocked, "\n")
cat("Probabilitas blocking:", round(p_block, 3), "\n")
cat("Rata-rata waktu tunggu:", round(avg_wait, 3), "jam\n")
cat("Rata-rata panjang antrian:", round(avg_queue, 2), "\n")
cat("Utilisasi server:", round(utilization, 3), "\n")

# Waktu respon sistem
hist(served$end_time - served$start_time, 
     main = "Distribusi Waktu Respon Sistem",
     xlab = "Waktu (jam)")

# Hubungan waktu tunggu vs waktu pelayanan
ggplot(served, aes(x = activity_time, y = end_time - start_time - activity_time)) +
  geom_point() +
  labs(title = "Waktu Tunggu vs Waktu Pelayanan",
       x = "Waktu Pelayanan",
       y = "Waktu Tunggu")

```

---

Apa faedahnya jika kita bisa memodelkan sistem antrian dengan teori antrian? Kita bisa melakukan beberapa hal berikut ini:

### 1. **Optimasi Biaya Operasional**
- **Contoh**: Supermarket menentukan jumlah optimal kasir.
- **Manfaat**:
  - Menyeimbangkan biaya _server_ (kasir/staf) vs biaya antrian (_customer dissatisfaction_)
  - Mengidentifikasi titik optimal dimana penambahan _server_ tidak lagi ekonomis
  - Studi kasus: _Call center_ mengurangi 15% biaya operasional dengan model M/M/c

### 2. **Peningkatan Kepuasan Pelanggan**
- **Metric**: Waktu tunggu (Wq) dan panjang antrian (Lq)
- **Aplikasi**:
  - Restoran cepat saji mengatur jadwal karyawan berdasarkan prediksi antrian
  - Rumah sakit mengurangi waktu tunggu pasien IGD dari 60 menit menjadi 25 menit
- **Data**: Setiap 10% penurunan waktu tunggu meningkatkan NPS 5 poin (_retail_)

### 3. **Manajemen Kapasitas yang Data-Driven**
- **Tools**: Model M/M/c/K untuk sistem kapasitas terbatas
- **Implementasi**:
  - Parkir mal dengan 200 slot → model menentukan 95% probability tersedia slot
  - Bandara mengoptimalkan _security check lanes_
- **Impact**: Mengurangi _lost sales_ 20% pada _peak hours_

Teori antrian memberikan _framework_ kuantitatif untuk:

- Mengkonversi _customer pain points_ (antrian) ke metrik terukur
- Mengevaluasi ROI penambahan sumber daya
- Membuat keputusan berbasis data bukan asumsi
- Memprediksi perilaku sistem dibawah berbagai kondisi


---
  
`if you find this article helpful, support this blog by clicking the ads.`



