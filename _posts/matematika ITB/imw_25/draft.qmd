---
title: "Optimisasi Antrian Lane Security Checking di Bandara"
format: 
  gfm:
    html-math-method: webtex
    toc: false
    toc-depth: 4
    fig-dpi: 500
    fig-width: 8
    fig-height: 4.5
editor: visual
execute:
  echo: false
  warning: false
  error: false
---

```{r}
#| include: false

library(dplyr)
library(ggplot2)
library(gt)
library(gtExtras)
```

## Pendahuluan

Pada pertengahan Juli 2025 ini, saya berkesempatan mengikuti *event* ***Industrial Mathematics Week 2025*** (IMW 2025) di program studi Matematika ITB. *Event* ini berlangsung selama 5 hari di mana 2 hari pertama diisi dengan seminar dan 3 hari sisanya diisi dengan *workshop* menyelesaikan masalah *real*. Topik IMW pada tahun ini menitikberatkan pada optimisasi, *vector-borne desease*, dan *deep learning*.

Ada tiga masalah yang bisa dipilih untuk dikerjakan secara berkelompok selama *workshop*, yakni:

1.  Optimisasi portofolio saham,
2.  Penanganan penyebaran penyakit *vector-borne*, dan
3.  Optimisasi antrian *lane security checking* di bandara.

Saya pribadi memilih *problem* ketiga karena lebih dekat dengan pekerjaan saya sehari-hari. Singkat cerita, kelompok saya lebih memilih mengerjakan dengan metode *deep learning* tapi saya coba membuat satu model lain menggunakan *linear programming* sederhana.

Model ini sempat saya presentasikan di hari terakhir IMW dan mendapatkan sambutan baik dari si empunya *problem* sehingga diskusi berlangsung setelah *event* berakhir secara *online*.

Begini masalahnya:

------------------------------------------------------------------------

## Masalah

Di suatu bandara, setiap kali *passengers* hendak masuk ke *waiting lounge*, mereka harus melewati *security checking*. Petugas *security* terbatas sehingga *lane* yang tersedia hanya ada 17 *lanes* saja. Masing-masing *security* memiliki *service rate* tertentu.

*Service rate* didefinisikan sebagai berapa banyak *passengers* yang bisa diproses oleh seorang petugas *security* selama rentang waktu tertentu.

Perhatikan ilustrasi ini:

![](IMG_1061.jpeg)

Setiap baris menandakan rentang waktu per 5 menit.

Pada rentang waktu 1, ada 100 orang *passengers* yang masuk ke area *security checking*. Oleh karena *service rate*-nya adalah 15 dan *lane* yang buka ada 3, maka *processed passengers* maksimum adalah sebesar 45 orang. Di akhir, akan ada sisa 55 orang *unprocessed passengers*.

Kemudian pada rentang waktu 2, ada 90 orang *passengers* yang masuk ke area plus 55 orang *unprocessed passengers* dari rentang waktu 1. Sehingga total *passengers* yang harus diproses adalah sebesar 145 orang. Oleh karena *service rate*-nya adalah 15 dan *lane* yang buka ada 2, maka *processed passengers* maksimum adalah sebesar 30 orang. Di akhir, akan ada sisa 115 orang *unprocessed passengers*.

Kemudian pada rentang waktu 3, ada 212 orang *passengers* yang masuk ke area plus 115 orang *unprocessed passengers* dari rentang waktu 2. Sehingga total *passengers* yang harus diproses adalah sebesar 327 orang. Oleh karena *service rate*-nya adalah 15 dan *lane* yang buka ada 5, maka *processed passengers* maksimum adalah sebesar 75 orang. Di akhir, akan ada sisa 252 orang *unprocessed passengers*.

Begitu seterusnya hingga baris ke 12.

> Oleh karena antrian bersifat **FIFO** (***first in - first out***), artinya jika saya bisa mengoptimalkan berapa banyak lane yang terbuka, maka saya bisa **meminimumkan** *unprocessed passenger* sehingga waktu tunggu antrian akan kurang dari dua rentang waktu (kurang dari 10 menit).

## *Modelling*

Pertama-tama saya akan definisikan *decision variables* dan beberapa parameter berikut ini:

-   $i \in \mathbb{Z}^+, 1 \leq i \leq 12$ menandakan rentang waktu satu jam yang dibagi per 5 menit sehingga ada 12 belas kelas.
-   $l_i \in \mathbb{Z}^+, 1 \leq i \leq 17$ menandakan berapa banyak *lane* dibuka pada waktu $i$.
-   $sr_i \in \mathbb{Z}^+$ menandakan *mean service rate* semua *lane* pada waktu $i$.
    -   Artinya: **rata-rata banyaknya penumpang yang bisa diperiksa oleh satu orang petugas selama rentang waktu 5 menit**.
    -   *Service rate* ini akan dicari dari data yang diberikan.
-   $N_i \in \mathbb{Z}^+$ menandakan berapa banyak penumpang yang datang ke *security check* pada waktu $i$.
-   $p_i \in \mathbb{Z}^+$ menandakan berapa banyak penumpang yang **bisa dan selesai diproses** pada waktu $i$.
-   $u_i \in \mathbb{Z}^+$ menandakan berapa banyak penumpang yang **tidak bisa diproses** pada waktu $i$.
    -   Akibatnya jika $u_i > 0$ akan menambahkan banyaknya penumpang pada $i+1$.
-   $\hat{N}_i \in \mathbb{Z}^+$ pada $i \in [2,12]$ menandakan banyaknya penumpang *real* yang dilayani pada waktu $i$.
    -   Perhatikan bahwa saat $i=1$ kita dapatkan $\hat{N}_1 = N_1$.
    -   Sedangkan pada $i \in [2,12]$, jika $u_{i-1}>0$ maka $\hat{N}_i = N_i + u_{i-1}$.

## Tujuan Optimisasi

Tujuan dari model optimisasi ini adalah **meminimalkan *lane* yang dibuka dan *unprocessed passengers***.

Kelak akan dicoba beberapa *objective functions* dan akan dibandingkan hasilnya.

## *Constraints*

Maksimal *lane* yang bisa dibuka setiap waktu $i$ adalah 17.

$$l_i \leq 17, \space \forall i \in [1,12]$$

Banyaknya *processed passengers* bisa jadi **kurang dari atau setara dengan** *service rate* dikalikan dengan *lane* yang dibuka.

$$p_i \leq sr_i \times l_i, \space \forall i \in [1,12]$$

Banyaknya *unprocessed passengers* itu adalah banyaknya *passengers* masuk dikurangi dengan *processed passengers*.

$$u_i = \hat{N}_i - p_i , \space \forall i \in [1,12]$$

## Pencarian *Service Rate* ($sr_i$)

Salah satu pertanyaan terbesar pada masalah ini adalah bagaimana mendekati nilai $sr_i$.

-   Apakah $sr_i$ tergantung dari jam berapa petugas *lane* bekerja?
-   Apakah $sr_i$ tergantung dari berapa banyak orang *passengers* yang datang?

Untuk menjawabnya, saya coba analisa sederhana *service rate* dari data yang diberikan dan buat visualisasi sebagai berikut:

**Sebaran *Service Rate***

```{r}
rm(list=ls())
load("data.rda")

df %>% 
  ggplot(aes(x = hari,
             y = service_rate)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Sebaran Service Rate per Day",
       subtitle = "Hitungan dalam menit") +
  theme(axis.title = element_blank())
```

Berikut adalah hubungan antara *Service Rate* dan total *passengers* yang masuk:

```{r}
#| fig-height: 15

df %>% 
  ggplot(aes(x = time,
             y = service_rate)) +
  geom_boxplot() +
  coord_flip() +
  theme_minimal() +
  labs(title = "Sebaran Service Rate per 5 Menit",
       subtitle = "Hitungan dalam menit",
       y = "Jam"
       ) +
  theme(axis.title.x = element_blank())
```

```{r}
#| fig-height: 15

df %>% 
  ggplot(aes(x = time,
             y = total_in)) +
  geom_boxplot() +
  coord_flip() +
  theme_minimal() +
  labs(title = "Sebaran Passengers yang Masuk per 5 Menit",
       subtitle = "Hitungan dalam orang",
       y = "Jam") +
  theme(axis.title.x = element_blank())
```

Dari dua grafik yang ditampilkan di atas, kita melihat bahwa ada pola yang mirip antara *service rate* dengan *total passengers* jika disajikan dalam *timeline* yang sama. Dari sini kita bisa mengeliminasi faktor *timeline* dan bisa menghubungkan langsung antara *service rate* dan *total passengers*.

> Saat *passengers* yang masuk antrian membludak, *security manager* akan memaksa para petugas *lane* "mempercepat" pekerjaannya (meningkatkan *service rate*-nya). Namun *service rate* akan **mentok** di suatu nilai tertentu dan tak akan bisa naik lagi (manusiawi).

### Hubungan *Service Rate* dengan *Total Passengers*

```{r}
df %>% 
  filter(total_in > 0) %>% 
  ggplot(aes(x = total_in,
             y = service_rate)) +
  geom_point() +
  theme_minimal() +
  labs(title = "Sebaran Service Rate per 5 menit",
       subtitle = "Hitungan dalam menit") +
  theme(axis.title = element_blank()) +
  theme_minimal() +
  geom_smooth(method = "loess") +
  labs(title = "Service Rate vs Total Passengers In",
       x = "passengers_in") 
```

Saya bisa membuat model *machine learning* prediksinya sebagai berikut:

### Model Hubungan *Service Rate* dengan *Total Passengers*

```{r}
df_temp = df %>% filter(total_in > 0)
model = 
  lm(service_rate ~ poly(total_in,degree = 7,raw = T),
     data = df_temp)

sr_pred = predict(model,df_temp)

mae = MLmetrics::MAE(df_temp$service_rate,sr_pred)

# save(model,file = "model_sr.rda")

df_temp %>% 
  mutate(pred = sr_pred) %>% 
  filter(total_in <= 600) %>% 
  ggplot(aes(x = total_in,
             y = pred)) +
  # geom_line(color = "darkblue") +
  geom_smooth(method = "loess") +
  theme_minimal() +
  labs(y = "service rate",
       x = "passengers in") 
```

Model ini menghasilkan *mean absolute error* sebesar `r mae`.

## Dua *Objective Functions* yang Dicoba

Ada dua skenario yang mungkin terjadi:

### Skenario I

*Security manager* berkata:

> Jangan sampai ada antrian yang panjang. ***Atur saja*** berapa *lane* yang dibuka atau ditutup!

$$\min{\sum_{i=1}^{12}{ u_i }}$$

### Skenario II

*Security manager* berkata:

> Dengan petugas seminimal mungkin, ***pokoknya saya tidak mau tahu***, antrian yang ada tidak boleh panjang!

$$\min{\sum_{i=1}^{12}{ (u_i + 11 \times l_i) }}$$

::: {style="font-size: 90%;"}
Nilai 11 adalah bobot: **seorang petugas *lane* setara dengan 11 orang *passengers* dalam selang waktu** $i$.

Nilai ini diambil dari *expected service rate* data.

### Semua *Constraints* yang Ada

$$l_i \leq 17, \space \forall i \in [1,12]$$

$$p_i \leq sr_i \times l_i, \space \forall i \in [1,12]$$

$$u_i = \hat{N}_i - p_i , \space \forall i \in [1,12]$$

## *Solving the Model*

Pencarian solusi optimal dari model menggunakan **R** dengan metode *simplex* di `library(ompr)`:

```{r}
#| echo: false
citation("ompr")
```

## Hasil Model Skenario I

```{r}
rm(list=ls())
load("ompr_1.rda")

output %>% 
  knitr::kable()

output %>% summarise(min_lane = min(lane),
                     max_lane = max(lane),
                     mean_lane = mean(lane),
                     total_antri = sum(unprocessed)) %>% 
  t()
```

## Hasil Model Skenario II

```{r}
rm(list=ls())
load("ompr_2.rda")

output %>% 
  knitr::kable()

output %>% summarise(min_lane = min(lane),
                     max_lane = max(lane),
                     mean_lane = mean(lane),
                     total_antri = sum(unprocessed)) %>% 
  t()
```

## *Further Discussion: Sensitivity Analysis* {.center .smaller}

Dari paparan model di atas, kita bisa melakukan *sensitivity analysis* untuk beberapa variabel yang bisa diatur oleh sang *security manager*.

-   Menurunkan atau menaikkan berapa **maksimal *lane*** agar didapatkan nilai optimal secara bisnis.
    -   Contoh: tak semua hari petugas yang bertugas bisa lengkap 17 *lanes*. Barangkali ada yang cuti atau izin bekerja sehingga $\leq 17$ orang.
-   Menyeragamkan atau membuat standar *range* nilai *service rate* sehingga lebih seragam dan "tinggi".
-   Definisikan berapa banyak *unprocessed* yang masih diperbolehkan sehingga *lane* yang digunakan bisa lebih "sedikit".
-   Menambahkan *multi objective optimization* sehingga menemukan *balance* antara *lane* dan *unprocessed*.
    -   Misalkan mengubah *minimize lane* menjadi $\epsilon - constraint$.

------------------------------------------------------------------------

`if you find this article helpful, support this blog by clicking the ads.`
:::
