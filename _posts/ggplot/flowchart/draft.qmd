---
title: "Tiga Cara Visualisasi Data di R"
format: 
  gfm:
    html-math-method: webtex
    fig-dpi: 500
    fig-width: 8
    fig-height: 4.5
editor: visual
execute:
  echo: false
  warning: false
  error: false
---

Ada banyak cara untuk membuat visualisasi data. Setidaknya ada tiga cara yang biasa dilakukan oleh orang-orang, yakni:

1. Grafik,
1. Tabel, dan
1. _Flowchart_.

> __Sebenarnya, cara apapun bisa kita pilih selama tujuan dan pesan yang disampaikan bisa diterima dengan baik oleh *audiences*__.

Saya akan menunjukkan cara membuat ketiga visualisasi tersebut dari data yang sama dengan pesan yang sama pula. Nanti kita akan coba bandingkan, mana yang lebih mudah dimengerti oleh _audience_.

Data yang saya gunakan adalah data survey sintetis yang pernah saya tulis di [artikel ini](https://ikanx101.com/blog/data-sintetis/). Berikut adalah sampel datanya:

```{r}
#| include: false

rm(list=ls())

library(dplyr)
library(tidyr)
library(janitor)
library(flowchart)
library(expss)
library(ggplot2)

load("survey.rda")

df_survey
```

```{r}
df_survey %>% 
  head(10) %>% 
  knitr::kable()
```

Saya akan menyampaikan pesan:

> __Berapa banyak responden dengan SES *Upper* yang *trial* produk? Coba *cross* per jenis kelamin!__


## Tabel

Ada banyak cara membuat tabel tabulasi di __R__ dari data tersebut. Kita bisa menggunakan `library(dplyr)`, `library(expss)`, atau `library(janitor)` tergantung dengan preferensi masing-masing. Saya akan tunjukkan caranya:

### `dplyr`

```{r}
#| echo: true

df_survey %>% 
  group_by(ses,gender,trial) %>% 
  tally() %>% 
  ungroup() %>% 
  filter(ses == "upper") %>% 
  knitr::kable()
```

### `expss`

```{r}
#| echo: true

df_survey %>% 
  tab_cells(trial) %>% 
  tab_rows(ses) %>% 
  tab_cols(gender) %>% 
  tab_stat_cases() %>% 
  tab_pivot() %>% 
  tab_caption("Berapa banyak responden dengan SES Upper yang trial produk? Cross dengan jenis kelamin")
```

### `janitor`

```{r}
#| echo: true

df_survey %>% 
  tabyl(trial,ses,gender) %>% 
  adorn_title(placement = "top")
```

## Grafik

Membuat grafik di __R__ bisa kita lakukan dengan menggunakan `library(ggplot2)`. Sebagai _input_-nya, kita perlu membuat tabulasi terlebih dahulu seperti cara di atas. Sekarang saya buat visualisasinya.

Berikut adalah visualisasi jika saya menggunakan cara __100% *stacked columns*__.

```{r}
#| echo: true

df_survey %>% 
  group_by(ses,gender,trial) %>% 
  tally() %>% 
  ungroup() %>% 
  filter(ses == "upper") %>% 
  ggplot(aes(x = gender,y = n,fill = trial)) +
  geom_col(color = "black",position = "fill") +
  geom_label(aes(label = paste0(trial,": n = ",n)),
             position = position_fill(vjust = 0.5),
             color = "white") +
  scale_fill_manual(values = c("darkred","darkblue")) +
  theme_minimal() +
  labs(title = "Berapa banyak responden dengan SES Upper yang trial produk?",
       subtitle = "Cross dengan jenis kelamin") +
  theme(legend.position = "none",
        axis.title = element_blank(),
        axis.text.y = element_blank()) 
```

Sedangkan berikut adalah jika saya mengikuti _style crosstab_ yang pernah saya tulis di [artikel ini](https://ikanx101.com/blog/crosstab-chart/):

```{r}
#| echo: true

df_survey %>% 
  group_by(ses,gender,trial) %>% 
  tally() %>% 
  ungroup() %>% 
  filter(ses == "upper") %>% 
  mutate(n = ifelse(trial == "ya",n,-n)) %>% 
  ggplot(aes(x = gender,y = n,fill = trial)) +
  geom_col(color = "black") +
  coord_flip() +
  geom_label(aes(label = paste0(trial,": n = ",abs(n))),
             color = "white") +
  scale_fill_manual(values = c("darkred","darkblue")) +
  ylim(-60,220) +
  theme_minimal() +
  labs(title = "Berapa banyak responden dengan SES Upper yang trial produk?",
       subtitle = "Cross dengan jenis kelamin",
       y = "n responden") +
  theme(legend.position = "none",
        axis.text.x = element_blank())
```

Selain itu, kita juga bisa membuat _sankey diagram_ yang tentunya pembuatannya lebih rumit dibandingkan kedua grafik di atas.

```{r}
#| echo: true

library(ggsankey)

df =
  df_survey %>%
  mutate(trial = ifelse(ses != "upper","exclude",trial)) %>% 
  mutate(gender = ifelse(trial != "ya","exclude",gender)) %>% 
  make_long(ses,trial,gender)

dagg =
  df %>%
  dplyr::group_by(node) %>%
  tally()

df2 = merge(df, dagg, by.x = 'node', by.y = 'node', all.x = TRUE)

pl = ggplot(df2, 
            aes(x = x,next_x = next_x,node = node,next_node = next_node,
                fill = factor(node),label = paste0(node," n=", n))) +
              geom_sankey(flow.alpha = 0.5,  
                          color = "gray40", 
                          show.legend = TRUE) + 
              geom_sankey_label(size = 3, 
                                color = "white", 
                                fill= "gray40", 
                                hjust = -0.2) +
              theme_bw() +
              theme(legend.position = "none",
                    axis.title = element_blank(),
                    axis.text.y = element_blank(),
                    axis.ticks = element_blank(),
                    panel.grid = element_blank()) + 
              scale_fill_viridis_d(option = "inferno") + 
              labs(title = "Berapa banyak responden dengan SES Upper yang trial produk?",subtitle = "Cross dengan jenis kelamin",fill = 'Nodes')

pl
```

## _Flowchart_

Satu bentuk visualisasi lain di __R__ yang baru saya pelajari beberapa hari ini adalah _flowchart_. Berikut ini saya akan tunjukkan cara membuat _flowchart_ menggunakan `library(flowchart)`:

```{r}
#| echo: true

flow = df_survey %>% as_fc(label = "Data Hasil Survey")
flow %>% 
  fc_filter(ses == "upper",
            label = "SES Upper Only", 
            show_exc = TRUE) %>% 
  fc_split(trial) %>% 
  fc_split(gender) %>% 
  fc_draw()
```

# Diskusi

Bagaimana menurut kalian? Visualisasi mana yang paling mudah dalam menyampaikan pesan yang diinginkan?

---

`if you find this article helpful, support this blog by clicking the ads.`




