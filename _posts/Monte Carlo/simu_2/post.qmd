---
title: "Math and Computational Science for Business part 2: Validasi Hipotesis dalam Sales dan Distribusi"
format: 
  gfm:
    html-math-method: webtex
    fig-dpi: 500
    fig-width: 8
    fig-height: 4.5
editor: visual
execute:
  echo: false
  warning: false
  error: false
---

Kembali lagi dalam topik terbaru dalam _blog_ saya. Kali ini melanjutkan tulisan sebelumnya (_sudah baca kan ya? Jika belum, silakan dibaca dulu ya_) saya akan membahas bagaimana matematika dan sains komputasi bisa digunakan untuk membantu dalam bisnis. Sama seperti pada tulisan sebelumnya, saya tidak ingin terjebak ke dalam teknis algoritma dan _how to_-nya. Saya ingin memberikan ide, konsep, dan prinsip yang bisa digunakan pada bisnis.

Pada tulisan ini, saya akan memberikan satu _use case_ menarik di mana simulasi Monte Carlo bisa digunakan untuk memvalidasi sebuah hipotesis yang dimiliki oleh salah seorang _sales manager_ di sebuah perusahaan FMCG terkemuka. 

Bagaimana ceritanya? _Cekidot!_

---

Suatu hari saya bertemu dengan seorang _sales manager_ dengan _level legendary_ di suatu kota. Beliau sudah berkarir sejak lama (hanya beda beberapa tahun dari total umur saya saat ini). Beliau memberikan _challenge_ kepada saya untuk bisa membuktikan teori yang dia kembangkan. 

> Sebagai seorang (yang mengaku _scientist_), mungkin akan lebih aman jika saya menuliskan kata teori sebagai hipotesis. _Hehe_

Bagaimana hipotesisnya? Beliau memberikan sebuah proposisi sebagai berikut:

> __Jika performa distribusi di atas 40%, maka distribution error akan berada di bawah 20%__.

Untuk menjelaskan apa yang dimaksud dengan __performa distribusi__ dan ___distribution error___, perhatikan ilustrasi sebagai berikut:

## Ilustrasi

Misalkan seorang _sales manager_ di kota tertentu bertanggung jawab untuk memasarkan produk A. Dalam rentang waktu Januari hingga Agustus, beliau memiliki data transaksi berapa banyak dan siapa saja toko (atau _outlet_) yang membeli produk A dari perusahaannya sebagai berikut:

![](tabel_1.png){fig-align="center" width="900"}

Semua toko yang telah bertransaksi sejak Januari hingga Agustus disebut dengan ___registered outlet___ (__RO__). Sedangkan toko yang aktif bertransaksi di suatu bulan tertentu disebut dengan ___active outlet___ (__AO__).

Performa distribusi adalah rata-rata rasio __AO per RO__ selama bulan Januari hingga Agustus, atau bisa saya tuliskan sebagai:

$$\text{performa distribusi}  = \frac{\sum_{i = Jan}^{Agt} \frac{AO_i}{EA_i}}{8}$$

Angka delapan artinya ada delapan bulan sejak Januari hingga Agustus (ingat rumus rata-rata _yah_).

Sedangkan _distribution error_ adalah rasio dari berapa banyak __RO__ yang tidak bertransaksi sama sekali di tiga bulan terakhir (Juni, Juli, dan Agustus) per total semua __RO__ yang ada.

Dari definisi di atas dan dari ilustrasi tabel yang saya berikan, maka besaran performa distribusi adalah rata-rata dari baris `Rasio AO/RO` pada baris ke `15`, yakni sebesar: `26.25%`. Sedangkan besaran _distribution error_ dari kasus di atas adalah sebesar `20%` (2 toko dari 10 __RO__).

Pertanyaan pertama yang terbersit dalam pikiran saya adalah bagaimana caranya memvalidasi pernyataan sang _legendary sales manager_ tersebut? 

_Jujurly_, untuk mendapatkan data transaksi detail seperti yang ada dalam ilustrasi tersebut tampaknya sulit bagi saya. Sampai suatu saat saya berpikir:

> _Bagaimana jika di Monte Carlo-in saja!_

Caranya adalah dengan membuat data transaksi sintetis selama tiga bulan berturut-turut dengan _input_ berupa persentase performa distribusi yang beragam. Ingat kembali definisi dari performa distribusi!

Performa distribusi adalah rata-rata persentase rasio __AO__ dengan __RO__. Dari definisi ini saja kita sudah bisa melihat bagaimana kira-kira bekerjanya simulasi tersebut.

Saya akan buat algoritmanya sebagai berikut dan melakukan simulasi sebanyak $10^3$ kali. Berikut adalah _flowchart_ simulasinya.

![](nomnoml.png){fig-align="center"}

Bagaimana hasilnya? Berikut adalah grafik _scatterplot_ antara performa distribusi dan _distribution error_:

```{r}
#| echo: false

library(dplyr)
library(ggplot2)
library(tidyr)

rm(list=ls())

load("ready.rda")

temp |>
  ggplot(aes(x = persen,
             y = f3_0)) +
  geom_point(size = .25,alpha = .5) +
  geom_smooth(method = "loess",color = "blue") +
  geom_vline(xintercept = 40,color = "darkred",alpha = .5) +
  geom_hline(yintercept = 20,color = "darkred",alpha = .5) +
  theme_minimal() +
  labs(x = "Performa Distribusi",
       y = "Distribution Error",
       title = "Hasil Simulasi Monte Carlo")
```

Saya tambahkan pula dalam grafik tersebut garis biru yang merupakan formula _smoothing_ dari titik data hasil simulasi. 

> Hal yang mengejutkan ternyata angka performa distribusi sebesar 40% memiliki nilai _distribution error_ sekitar 20% berdasarkan model pada garis biru.

Ternyata memang benar _experience matters_ pada kasus ini. Ucapan sang _legendary sales manager_ benar adanya.

---


Pertanyaan selanjutnya adalah menentukan _critical area_ bagi suatu produk. Maksudnya adalah kapan kita bisa menentukan suatu produk __tidak sedang  baik-baik saja__ dan perlu diberikan _treatment_ khusus sebelum terlambat.

Cara termudah yang saya bisa lakukan adalah dengan menentukan area awal di sumbu $x$ yang memberikan kenaikan drastis pada sumbu $y$. Konsep ini di kalkulus disebut dengan diferensial atau turunan.

```{r}
#| echo: false

temp_ = 
  temp_ %>% 
  rename(x = persen,
         y = f3_0) %>% 
  group_by(x) %>% 
  summarise(y = mean(y)) %>% 
  ungroup() %>% 
  arrange(x) %>% 
  mutate(dx = c(diff(x,1),0),
         dy = c(diff(y,1),0)
         )

temp_ %>% 
  ggplot(aes(x,y)) +
  geom_point(size = .25) +
  geom_vline(xintercept = 40,color = "darkred",alpha = .5) +
  geom_hline(yintercept = 20,color = "darkred",alpha = .5)

temp_ %>% 
  ggplot(aes(x,dy)) +
  # geom_point(size = .25) +
  geom_vline(xintercept = 40,color = "darkred",alpha = .5) +
  geom_smooth(method = "loess")
```

## _Remarks_

Pada contoh di atas, sang _legendary sales manager_ memberikan simplifikasi dimana _sales value_ permasing-masing toko tidak dilihat pada aturan 40-20 miliknya. Namun besaran _sales value_ kelak akan dilihat sebagai persentase kontribusi masing-masing toko terhadap sales total produknya.

Hal ini berguna saat ada produk dengan performa jelek, maka toko-toko yang tidak membeli produk sama sekali dalam tiga bulan akan dilihat siapa saja _top contributors_-nya. _Special treatment_ akan dilakukan kepada toko-toko tersebut.

Pada penjelasan artikel ini, saya hanya membuat simulasi Monte Carlo untuk membandingkan performa distribusi dengan _distribution error_ tanpa melihat _sales value_ per masing-masing toko.

â€”-

`if you find this article helpful, support this blog by clicking the ads.`


